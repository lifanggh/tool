动态sql:  https://www.cnblogs.com/ysocean/p/7289529.html
https://github.com/Flying9001/campustore/tree/master/webservice/dao/src/main

使用@param 区别是：使用注解xml中可以不用加parameterType

传递单个参数,不使用 @Param 注解
 //查询某一件商品
dao: Commodity queryOne(Commodity commodity);
xml: <select id="queryOne" resultType="Commodity">
		select *
		from t_commodity com 
		where id = #{id}
	</select>	
	
传递单个参数,使用@Param注解
 //查询某一件商品
dao: Commodity queryOne(@Param("commodity")Commodity commodity);
xml:<select id="queryOne" parameterType="com.ljq.cs.entity.Commodity" resultType="Commodity">
		select *
		from t_commodity com 
		where id = #{commodity.id}
	</select>	
	
当使用javaBean作为对象的时候，在写 SQL 语句的时候，必须指定参数类型 parameterType="com.ljq.cs.entity.Commodity"，
同时在 #{ } 取值的时候不能直接填入 javaBean 的属性，必须这样使用 commodity.id ;否则，会抛出参数类型不匹配异常

//用户登录
    UserInfo signin(@Param("account")String account,@Param("passcode")String passcode);
<!-- 用户登录 -->
    <select id="signin" resultType="UserInfo">
        select *
        from t_userinfo info
        where account=#{account} and passcode=#{passcode}
    </select>
 这里 @Param 中定义的变量名必须和 mapper 中保持一致才可以
 
 传递多个参数,不使用 @Param 注解
 
  //	搜索用户,对结果进行分页
   List searchUser(Map<String,Object>);

  使用DAO,UserService.java

 UserInfo userInfo = new UserInfo();
 Pagination page = new Pagination();
 Map<String,Object> map = new HashMap<>;
 map.put("userInfo",userInfo);
 pam.put("page",page);
 userService.searchUser(map);
 
 mapper文件userInfomapper.xml
	<select id="searchUser" parameterType="java.util.Map" resultType="UserInfo">
		select *
		from t_userinfo user 
		where 1 =1
		<if test="user.uname != null and ''!= user.uname ">
			and user.uname like '%${userInfo.uname}$%'
		</if>
			
		<if test="page.order != null and page.order == 10" >
			order by user.id asc
		</if>
		limit ${page.pagenum * page.limitnum}, #{page.limitnum}
		
	</select>
------------------------------------------------------------------------------------------------------
<!--mybatis模糊多条件查询动态sql语句 -->
把’%#{name}%’改为”%”#{name}”%”:
  <select id="searchStudents" resultType="com.example.entity.StudentEntity"
        parameterType="com.example.entity.StudentEntity">
        SELECT * FROM test_student
 <where>    
 <if test="age != null and age != '' and compare != null and compare != ''">
           age 
       ${compare}
          #{age}
         </if>
  <if test="name != null and name != ''">
      AND name LIKE "%"#{name}"%"
   </if> 
  <if test="address != null and address != ''">
     AND address LIKE "%"#{address}"%"
   </if>
 </where>
    ORDER BY id
 </select>
-------------------------------------------------------------------------------------------------------------
<!-- 查询条件：创建开始时间 -->
    <if test="createdBegintime!=null and createdBegintime!=''">
         AND CREATED &gt;= #{createdBegintime}
     </if>

<!-- 查询条件：创建结束时间 -->
   <if test="createdEndtime!=null and createdEndtime!=''">
        AND CREATED &lt;= #{createdEndtime}
   </if>
-----------------------------------------------------------------------------------------------------------------
<mapper namespace="studentNamespace">
	<resultMap type="Student" id="studentMap">
		<id property="id" column="id"/>
		<result property="name" column="name"/>
		<result property="sal" column="sal"/>
	</resultMap>
 <!-- if where 实现查询 -->
	<select id="findConditionalStudent" parameterType="map" resultMap="studentMap">
		select id,name,sal from students
		<where>
			<if test="pid !=null">
				and id=#{pid}
			</if>
			<if test="pname !=null">
				and name=#{pname}
			</if>
			<if test="psal !=null">
				and sal=#{psal}
			</if>
		</where>
	</select>
  <!--动态sql实现更新 -->
  <update id="dynamicUpdate" parameterType="map">
	update students 
	<set>
		<if test="pname !=null">
			name=#{pname},
		</if>
		<if test="psal !=null">
			sal=#{psal},
		</if>
	</set>
	where id=#{pid}
</update>
<!-- 动态sql实现in语句批量删除记录-->
<delete id="dynamicDelete">
	delete from students where id in 
	<foreach collection="array" open="(" close=")" separator="," item="arr">
		#{arr}
	</foreach>
</delete>
<!--集合类方式：-->
<delete id="dynamicDeleteList">
	delete from students where id in 
	<foreach collection="list" open="(" close=")" separator="," item="ids">
		#{ids}
	</foreach>
</delete>

</mapper>
--------------------- 
